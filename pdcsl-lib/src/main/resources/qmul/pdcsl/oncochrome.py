# -*- coding: utf-8 -*-
# OncoChrome.py - Helper functions for the OncoChrome
# Copyright Â© 2019 Damien Goutte-Gattat

"""Helper functions to work with OncoChrome images."""

from ij import IJ, ImagePlus
from ij.process import AutoThresholder

from qmul.pdcsl.helper import apply_binary_filters, auto_threshold, apply_mask


_default_channel_names = ['EGFP', 'mTurquoise', 'mCherry', 'mCitrine', 'Cy5']
_default_thresholders = [
    AutoThresholder.Method.Moments,
    AutoThresholder.Method.Moments,
    AutoThresholder.Method.Moments,
    AutoThresholder.Method.Moments,
    AutoThresholder.Method.MaxEntropy
    ]


def create_masks(image, channels=_default_channel_names, thresholders=_default_thresholders):
    """Create masks for OncoChrome-positive regions.

    Given a hyperstack, create another hyperstack with the first
    four channels containing only automatically created binary
    masks.

    If the source image contains more than 4 channels, the other
    channels are copied "as is" to the new image.

    :param image: The original image
    :type image: ij.ImagePlus
    :param channels: An array of channel names
    :param thresholders: An array of thresholding methods
    :type thresholders: [ij.process.AutoThresholder.Method]
    :returns: A new image with masks in the first four channels.
    """
    nslices = image.getNSlices()
    nchannels = image.getNChannels()

    masks = IJ.createHyperStack("{} Masks".format(image.getTitle()),
                                image.getWidth(), image.getHeight(),
                                nchannels, nslices, 1, 8)

    for i in range(nslices):
        for j in range(nchannels):
            image.setPosition(j+1, i+1, 1)
            if j < 4:
                mask = auto_threshold(image, thresholders[j], channels[j]).getProcessor()
            else:
                mask = image.getProcessor().duplicate()
            masks.setPosition(j+1, i+1, 1)
            masks.setProcessor(mask)

    return masks


def apply_masks(image):
    """Apply OncoChrome masks to non-OncoChrome channel.

    Given an image such as one generated by the create_masks function,
    containing four binary masks and a fifth, non-binary, channel,
    create another image containing four channel, each channel being
    a copy of the original image's fifth channel with one of the
    binary mask applied.

    :param image: The image to process
    :param type: ij.ImagePlus
    :returns: A new image with the masks applied.
    :rtype: ij.ImagePlus
    """
    nslices = image.getNSlices()
    nchannels = image.getNChannels()

    masked = IJ.createHyperStack("{} Applied".format(image.getTitle()),
                                 image.getWidth(), image.getHeight(),
                                 nchannels, nslices, 1, 8)

    for i in range(nslices):
        for j in range(4):
            image.setPosition(5, i+1, 1)
            src = image.getProcessor().duplicate()
            masked.setPosition(5, i+1, 1)
            masked.setProcessor(src.duplicate())

            image.setPosition(j+1, i+1, 1)
            mask = image.getProcessor()

            result = apply_mask(src, mask)
            masked.setPosition(j+1, i+1, 1)
            masked.setProcessor(result)

    return masked
